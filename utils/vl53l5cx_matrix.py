#!/usr/bin/env python3
import time
import numpy as np
from vl53l5cx.vl53l5cx import VL53L5CX
import datetime
import signal
import sys

def main():
    print('=== VL53L5CX 8x8 Continuous Monitor ===')
    print('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞...')

    sensor = VL53L5CX()
    sensor.init()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º 8x8
    if sensor.get_resolution() != 64:
        print('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º 8x8...')
        sensor.set_resolution(64)
        sensor.set_ranging_frequency_hz(15)

    print(f'–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {sensor.get_resolution()} (8x8)')
    print(f'–ß–∞—Å—Ç–æ—Ç–∞: {sensor.get_ranging_frequency_hz()} Hz')
    print('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n')

    sensor.start_ranging()

    measurement = 0
    # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    last_valid_time = np.zeros((8, 8))
    # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    last_valid_distances = np.zeros((8, 8))
    
    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "—Ö–æ—Ä–æ—à–∏—Ö" –∏–∑–º–µ—Ä–µ–Ω–∏–π
    MIN_VALID_DISTANCE = 30    # –º–º
    MAX_VALID_DISTANCE = 4000   # –º–º
    
    try:
        while True:
            measurement += 1
            current_time = time.time()
            time.sleep(0.3)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = sensor.get_ranging_data()
            distances = np.array(data.distance_mm).reshape(8, 8)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –¥–ª—è "—Ö–æ—Ä–æ—à–∏—Ö" –∏–∑–º–µ—Ä–µ–Ω–∏–π
            for row in range(8):
                for col in range(8):
                    d = distances[row, col]
                    # –°—á–∏—Ç–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã–º –µ—Å–ª–∏:
                    # 1. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                    # 2. –≠—Ç–æ –Ω–µ 0 (–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö)
                    if d > MIN_VALID_DISTANCE and d < MAX_VALID_DISTANCE:
                        last_valid_time[row, col] = current_time
                        last_valid_distances[row, col] = d

            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
            print('\033[2J\033[H', end='')

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            timestamp = datetime.datetime.now().strftime('%H:%M:%S')
            print(f'=== VL53L5CX 8x8 | {timestamp} | #{measurement} ===\n')

            # –ú–∞—Ç—Ä–∏—Ü–∞ —Ç–µ–∫—É—â–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            print('–¢–ï–ö–£–©–ò–ï –†–ê–°–°–¢–û–Ø–ù–ò–Ø (–º–º):')
            print('     ', end='')
            for col in range(8):
                print(f'{col:>5}', end='')
            print('\n   +' + '-' * 40)

            for row in range(8):
                print(f'{row}  | ', end='')
                for col in range(8):
                    d = distances[row, col]
                    if d > 0:
                        if d < MIN_VALID_DISTANCE or d > MAX_VALID_DISTANCE:
                            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - —Å–µ—Ä—ã–º
                            print(f'\033[90m{d:4.0f}\033[0m ', end='')
                        elif d < 100:
                            print(f'\033[91m{d:4.0f}\033[0m ', end='')  # –ö—Ä–∞—Å–Ω—ã–π
                        elif d < 500:
                            print(f'\033[93m{d:4.0f}\033[0m ', end='')  # –ñ–µ–ª—Ç—ã–π
                        elif d < 1000:
                            print(f'\033[92m{d:4.0f}\033[0m ', end='')  # –ó–µ–ª–µ–Ω—ã–π
                        else:
                            print(f'\033[94m{d:4.0f}\033[0m ', end='')  # –°–∏–Ω–∏–π
                    else:
                        print(' --- ', end='')
                print()
            
            # –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            print('\n\n–ü–û–°–õ–ï–î–ù–ò–ï –í–ê–õ–ò–î–ù–´–ï –†–ê–°–°–¢–û–Ø–ù–ò–Ø (–º–º):')
            print('     ', end='')
            for col in range(8):
                print(f'{col:>5}', end='')
            print('\n   +' + '-' * 40)
            
            for row in range(8):
                print(f'{row}  | ', end='')
                for col in range(8):
                    d = last_valid_distances[row, col]
                    if d > 0:
                        age = current_time - last_valid_time[row, col]
                        # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –ø–æ –¥–∞–≤–Ω–æ—Å—Ç–∏
                        if age < 1:
                            print(f'\033[92m{d:4.0f}\033[0m ', end='')  # –ó–µ–ª–µ–Ω—ã–π - —Å–≤–µ–∂–∏–µ
                        elif age < 5:
                            print(f'\033[93m{d:4.0f}\033[0m ', end='')  # –ñ–µ–ª—Ç—ã–π - –Ω–µ–¥–∞–≤–Ω–∏–µ
                        elif age < 10:
                            print(f'\033[91m{d:4.0f}\033[0m ', end='')  # –ö—Ä–∞—Å–Ω—ã–π - —Å—Ç–∞—Ä—ã–µ
                        else:
                            print(f'\033[95m{d:4.0f}\033[0m ', end='')  # –ü—É—Ä–ø—É—Ä–Ω—ã–π - –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ
                    else:
                        print(' N/A ', end='')
                print()

            # –î–∞–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            print('\n\n–î–ê–í–ù–û–°–¢–¨ –ü–û–°–õ–ï–î–ù–ï–ì–û –í–ê–õ–ò–î–ù–û–ì–û –ò–ó–ú–ï–†–ï–ù–ò–Ø (—Å–µ–∫—É–Ω–¥):')
            print('     ', end='')
            for col in range(8):
                print(f'{col:>5}', end='')
            print('\n   +' + '-' * 40)
            
            for row in range(8):
                print(f'{row}  | ', end='')
                for col in range(8):
                    if last_valid_time[row, col] > 0:
                        age = current_time - last_valid_time[row, col]
                        
                        # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
                        if age < 1:
                            print(f'\033[92m{age:4.1f}\033[0m ', end='')  # –ó–µ–ª–µ–Ω—ã–π
                        elif age < 5:
                            print(f'\033[93m{age:4.1f}\033[0m ', end='')  # –ñ–µ–ª—Ç—ã–π
                        elif age < 10:
                            print(f'\033[91m{age:4.1f}\033[0m ', end='')  # –ö—Ä–∞—Å–Ω—ã–π
                        else:
                            print(f'\033[95m{age:4.0f}\033[0m ', end='')  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
                    else:
                        print(' N/A ', end='')
                print()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            # –î–ª—è —Ç–µ–∫—É—â–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ
            valid_mask = (distances > MIN_VALID_DISTANCE) & (distances < MAX_VALID_DISTANCE)
            valid = distances[valid_mask]
            
            if len(valid) > 0:
                print(f'\n–¢–µ–∫—É—â–∏–µ –≤–∞–ª–∏–¥–Ω—ã–µ ({MIN_VALID_DISTANCE}-{MAX_VALID_DISTANCE}–º–º):')
                print(f'–ú–∏–Ω: {np.min(valid):.0f} –º–º | –ú–∞–∫—Å: {np.max(valid):.0f} –º–º | –°—Ä–µ–¥–Ω–µ–µ: {np.mean(valid):.0f} –º–º')
                print(f'–í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid)}/64 ({len(valid)/64*100:.0f}%)')
                
                # –ê–Ω–∞–ª–∏–∑ "–º–µ—Ä—Ç–≤—ã—Ö" –∑–æ–Ω
                never_valid = np.sum(last_valid_time == 0)
                stale_5s = np.sum((current_time - last_valid_time) > 5) - never_valid
                stale_10s = np.sum((current_time - last_valid_time) > 10) - never_valid
                
                if never_valid > 0:
                    print(f'\n‚ö†Ô∏è  –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –≤–∞–ª–∏–¥–Ω—ã—Ö: {never_valid} —Ç–æ—á–µ–∫')
                if stale_5s > 0:
                    print(f'‚è∞ –ù–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å >5 —Å–µ–∫: {stale_5s} —Ç–æ—á–µ–∫')
                if stale_10s > 0:
                    print(f'üíÄ –ù–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å >10 —Å–µ–∫: {stale_10s} —Ç–æ—á–µ–∫')

                close = len(valid[valid < 200])
                if close > 0:
                    print(f'\nüö® –ë–ª–∏–∑–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (<200–º–º): {close}')

    except KeyboardInterrupt:
        print('\n\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞...')
    finally:
        sensor.stop_ranging()
        print('–î–∞—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

if __name__ == '__main__':
    main()

