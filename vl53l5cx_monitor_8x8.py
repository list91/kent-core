#!/usr/bin/env python3
import time
import numpy as np
from vl53l5cx.vl53l5cx import VL53L5CX
import datetime
import signal
import sys

def main():
    print('=== VL53L5CX 8x8 Continuous Monitor ===')
    print('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–∞...')
    
    sensor = VL53L5CX()
    sensor.init()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º 8x8
    if sensor.get_resolution() != 64:
        print('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º 8x8...')
        sensor.set_resolution(64)
        sensor.set_ranging_frequency_hz(15)
    
    print(f'–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {sensor.get_resolution()} (8x8)')
    print(f'–ß–∞—Å—Ç–æ—Ç–∞: {sensor.get_ranging_frequency_hz()} Hz')
    print('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n')
    
    sensor.start_ranging()
    
    measurement = 0
    try:
        while True:
            measurement += 1
            time.sleep(0.3)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = sensor.get_ranging_data()
            distances = np.array(data.distance_mm).reshape(8, 8)
            
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
            print('\033[2J\033[H', end='')
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            timestamp = datetime.datetime.now().strftime('%H:%M:%S')
            print(f'=== VL53L5CX 8x8 | {timestamp} | #{measurement} ===\n')
            
            # –ú–∞—Ç—Ä–∏—Ü–∞ —Å —Ü–≤–µ—Ç–∞–º–∏
            print('     ', end='')
            for col in range(8):
                print(f'{col:>5}', end='')
            print('\n   +' + '-' * 40)
            
            for row in range(8):
                print(f'{row}  | ', end='')
                for col in range(8):
                    d = distances[row, col]
                    if d > 0:
                        if d < 100:
                            print(f'\033[91m{d:4.0f}\033[0m ', end='')  # –ö—Ä–∞—Å–Ω—ã–π
                        elif d < 500:
                            print(f'\033[93m{d:4.0f}\033[0m ', end='')  # –ñ–µ–ª—Ç—ã–π
                        elif d < 1000:
                            print(f'\033[92m{d:4.0f}\033[0m ', end='')  # –ó–µ–ª–µ–Ω—ã–π
                        else:
                            print(f'\033[94m{d:4.0f}\033[0m ', end='')  # –°–∏–Ω–∏–π
                    else:
                        print(' --- ', end='')
                print()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            valid = distances[distances > 0]
            if len(valid) > 0:
                print(f'\n–ú–∏–Ω: {np.min(valid):.0f} –º–º | –ú–∞–∫—Å: {np.max(valid):.0f} –º–º | –°—Ä–µ–¥–Ω–µ–µ: {np.mean(valid):.0f} –º–º')
                print(f'–í–∞–ª–∏–¥–Ω—ã—Ö: {len(valid)}/64 ({len(valid)/64*100:.0f}%)')
                
                close = len(valid[valid < 200])
                if close > 0:
                    print(f'üö® –ë–ª–∏–∑–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (<200–º–º): {close}')
    
    except KeyboardInterrupt:
        print('\n\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞...')
    finally:
        sensor.stop_ranging()
        print('–î–∞—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

if __name__ == '__main__':
    main()
